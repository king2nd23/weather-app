{"version":3,"sources":["CurrentWeather.js","LoadingScreen.js","index.js"],"names":["CurrentWeather","props","react_default","a","createElement","Fragment","className","city","summary","icon","currentTemp","high","low","weather_icons_react","size","wind","chanceOfRain","humidity","loadingScreen","react_loader_spinner_default","type","color","height","width","App","state","lat","long","errormsg","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","apiURL","concat","geoCode","apiResponse","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","res","json","response","currentWeather","currently","currentWind","Math","round","windSpeed","precipProbability","currentHumidity","temperature","highTemp","daily","data","temperatureHigh","lowTemp","temperatureLow","console","log","catch","stop","_x","apply","arguments","getCityState","_ref2","_callee2","_context2","results","address_components","long_name","_x2","weatherComponents","_ref3","_callee3","_context3","setTimeout","src_CurrentWeather","LoadingScreen","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.d26f5b90.chunk.js","sourcesContent":["import React from \"react\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy }\nfrom 'weather-icons-react';\nimport MainCSS from \"./main.css\";\n\nconst CurrentWeather = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"weatherApp\">\n          <div className=\"locationSummary\">\n            <div className=\"city\">{props.city}</div>\n            <div className=\"summary\">{props.summary}</div>\n          </div>\n          <div className= \"todaysDetails\">\n            <div className= \"icon\">\n              {props.icon}\n            </div>\n            <div className=\"dailyTemp\">\n              <p className=\"currentTemp\">{props.currentTemp}</p>\n              <p className= \"hiLoTemp\">{props.high}° / {props.low}°</p>\n            </div>\n          </div>\n          <div className= \"currentWeatherDetails\">\n            <ul>\n              <li className= \"currentWindSpeed\">\n                <WiStrongWind size={40} />\n                <span>{props.wind}mph</span>\n              </li>\n              <li className= \"chanceOfPrecip\">\n                <WiUmbrella size={40} />\n                <span>{props.chanceOfRain}%</span>\n              </li>\n              <li className= \"currentHumidity\">\n                <WiRaindrops size={40} />\n                <span>{props.humidity}%</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n  </React.Fragment>\n\n  );\n};\nexport default CurrentWeather;\n","import React from 'react';\n import Loader from 'react-loader-spinner';\n\nconst loadingScreen = (props) => {\n  return(\n  <div className=\"spinner\">\n  <Loader\n         type=\"Plane\"\n         color=\"#00BFFF\"\n         height=\"100\"\n         width=\"100\"\n      />\n  </div>\n  )\n}\n\nexport default loadingScreen;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy}\nfrom 'weather-icons-react';\nimport LoadingScreen from \"./LoadingScreen\";\n\n//setting up initial state\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    errormsg: \"\",\n    icon: null,\n    currentTemp: null,\n    high: null,\n    low: null,\n    wind: null,\n    chanceOfRain: null,\n    humidity: null,\n    summary: null,\n    city: null\n  };\n\n  componentDidMount() {\n    //get the user's current location\n    const getPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          this.setState({\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          });\n        },\n        error => this.setState({ errormsg: error.message })\n      );\n    };\n    getPosition();\n\n    //adds the latitude and longitude to the api request URL\n    let apiURL = () => {\n      let apiCall = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n        this.state.lat\n      },${this.state.long}`;\n      return apiCall;\n    };\n    //googlemaps api key AIzaSyDBbNeVUJg3BVLIi7_lr7xGciYsh7MDNlc\n    let geoCode = () => {\n      let getGeoCode = `https://maps.googleapis.com/maps/api/geocode/json?latlng=\n      ${this.state.lat},${this.state.long}&key=AIzaSyDBbNeVUJg3BVLIi7_lr7xGciYsh7MDNlc`;\n      return getGeoCode;\n    }\n\n    //fetches response from DarkSky API and sets up state for app components\n    let apiResponse = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response => {\n          let currentWeather = response.currently;\n\n          //setting the icon for current weather, the name of icons in the library does not match icon names given by the api\n          this.setState({ icon: currentWeather.icon });\n            if (this.state.icon === \"clear-day\") {\n              this.setState({ icon:  <WiDaySunny size={200} color='#fff917' />})\n              };\n            if (this.state.icon === \"clear-night\") {\n              this.setState({ icon:  <WiNightClear size={200} color='#000' />})\n              };\n            if (this.state.icon === \"rain\") {\n              this.setState({ icon:  <WiRain size={200} color='#000' />})\n              };\n            if (this.state.icon === \"snow\") {\n              this.setState({ icon:  <WiSnow size={200} color='#000' />})\n              };\n            if (this.state.icon === \"sleet\") {\n              this.setState({ icon:  <WiSleet size={200} color='#000' />})\n              };\n            if (this.state.icon === \"wind\") {\n              this.setState({ icon:  <WiStrongWind size={200} color='#000' />})\n              };\n            if (this.state.icon === \"fog\") {\n              this.setState({ icon:  <WiFog size={200} color='#000' />})\n              };\n            if (this.state.icon === \"cloudy\") {\n              this.setState({ icon:  <WiCloudy size={200} color='#000' />})\n              };\n            if (this.state.icon === \"partly-cloudy-day\") {\n              this.setState({ icon:  <WiDayCloudy size={200} color='#000' />})\n            };\n            if (this.state.icon === \"partly-cloudy-night\") {\n              this.setState({ icon:  <WiNightAltPartlyCloudy size={200} color='#000' />})\n            };\n          this.setState({ currentWind: Math.round(currentWeather.windSpeed) });\n          this.setState({ chanceOfRain: Math.round(currentWeather.precipProbability * 100) });\n          this.setState({ currentHumidity: Math.round(currentWeather.humidity * 100)});\n          this.setState({ currentTemp: Math.round(currentWeather.temperature) });\n          this.setState({ highTemp: Math.round(response.daily.data[0].temperatureHigh) });\n          this.setState({ lowTemp: Math.round(response.daily.data[0].temperatureLow) });\n          this.setState({ summary: currentWeather.summary });\n          console.log(currentWeather);\n          console.log(response);\n        })\n        .catch(error => console.log(error));\n    };\n\n    //gets the user's city using reverse geocoding from Google Maps API\n    let getCityState = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response =>{\n          this.setState({ city: response.results[5].address_components[1].long_name });\n        })\n    }\n\n    //runs the apiURL(), apiResponse(), and getCityState()\n    const weatherComponents = async () => {\n      apiURL();\n      await geoCode();\n      await apiResponse(apiURL());\n      // await console.log(getCityState(geoCode()));\n      await getCityState(geoCode())\n    };\n\n    //using setTimeout to wait for geolocation until I find a more efficient way\n    function getWeather() {\n      setTimeout(() => {\n        weatherComponents();\n      }, 7000);\n    }\n    getWeather();\n  }\n\n  renderContent() {\n    if (this.state.errormsg && !this.state.lat) {\n      return <div>{this.state.errormsg}</div>\n    }\n\n    if (!this.state.error && this.state.city) {\n      return (\n        <div>\n          <CurrentWeather\n            icon={this.state.icon}\n            currentTemp={this.state.currentTemp}\n            high={this.state.highTemp}\n            low={this.state.lowTemp}\n            wind={this.state.currentWind}\n            chanceOfRain={this.state.chanceOfRain}\n            humidity={this.state.currentHumidity}\n            summary={this.state.summary}\n            city={this.state.city}\n          />\n        </div>\n      )\n    }\n    return <LoadingScreen />\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderContent()}\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}