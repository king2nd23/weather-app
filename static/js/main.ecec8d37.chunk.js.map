{"version":3,"sources":["CurrentWeather.js","index.js"],"names":["CurrentWeather","props","react_default","a","createElement","Fragment","className","style","display","verticalAlign","icon","fontSize","currentTemp","high","low","listStyle","textAlign","weather_icons_react","size","color","wind","chanceOfRain","humidity","App","state","lat","long","errormsg","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","apiURL","concat","apiResponse","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","res","json","response","currentWeather","currently","currentWind","windSpeed","precipProbability","currentHumidity","apparentTemperature","highTemp","daily","data","temperatureHigh","lowTemp","temperatureLow","console","log","catch","stop","_x","apply","arguments","weatherComponents","_ref2","_callee2","_context2","setTimeout","src_CurrentWeather","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.ecec8d37.chunk.js","sourcesContent":["import React from \"react\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy }\nfrom 'weather-icons-react';\nimport MainCSS from \"./main.css\";\n\n\nconst CurrentWeather = (props) => {\n  return (\n    <React.Fragment>\n    <div className= \"todaysDetails\" style={ {display: \"inline-block\"} }>\n      <div className= \"icon\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n        {props.icon}\n      </div>\n      <div className=\"dailyTemp\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n        <p className=\"currentTemp\" style={ {fontSize: \"9rem\"} }>{props.currentTemp}</p>\n        <p className= \"hiLo temp\" style={ {fontSize: \"1.5rem\"} }>{props.high} / {props.low}</p>\n      </div>\n    </div>\n    <div className= \"currentWeatherDetails\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n      <ul style={ {listStyle: \"none\"} }>\n        <li className= \"currentWindSpeed\" style= { {fontSize: \"1.5rem\", textAlign: \"center\"} }>\n          <WiStrongWind size={40} color='#000' />\n          <span>{props.wind}</span>\n        </li>\n        <li className= \"chanceOfPrecip\" style= { {fontSize: \"1.5rem\"} }>\n          <WiUmbrella size={40} color='#000' />\n          <span>{props.chanceOfRain}</span>\n        </li>\n        <li className= \"currentHumidity\" style= { {fontSize: \"1.5rem\"} }>\n          <WiRaindrops size={40} color='#000' />\n          <span>{props.humidity}</span>\n        </li>\n      </ul>\n    </div>\n  </React.Fragment>\n\n  );\n};\nexport default CurrentWeather;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy}\nfrom 'weather-icons-react';\n\n//setting up initial state\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    errormsg: \"\",\n    icon: null,\n    currentTemp: null,\n    high: null,\n    low: null,\n    wind: null,\n    chanceOfRain: null,\n    humidity: null\n  };\n\n  componentDidMount() {\n    //get the user's current location\n    const getPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          this.setState({\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          });\n        },\n        error => this.setState({ errormsg: error.message })\n      );\n    };\n    getPosition();\n\n    //adds the latitude and longitude to the api request URL\n    let apiURL = () => {\n      let apiCall = `https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n        this.state.lat\n      },${this.state.long}`;\n      return apiCall;\n    };\n\n    //fetches response from DarkSky API and sets up state for app components\n    let apiResponse = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response => {\n          let currentWeather = response.currently;\n\n          //setting the icon for current weather, the name of icons in the library does not match icon names given by the api\n          this.setState({ icon: currentWeather.icon });\n            if (this.state.icon === \"clear-day\") {\n              this.setState({ icon:  <WiDaySunny size={200} color='#000' />})\n              };\n            if (this.state.icon === \"clear-night\") {\n              this.setState({ icon:  <WiNightClear size={200} color='#000' />})\n              };\n            if (this.state.icon === \"rain\") {\n              this.setState({ icon:  <WiRain size={200} color='#000' />})\n              };\n            if (this.state.icon === \"snow\") {\n              this.setState({ icon:  <WiSnow size={200} color='#000' />})\n              };\n            if (this.state.icon === \"sleet\") {\n              this.setState({ icon:  <WiSleet size={200} color='#000' />})\n              };\n            if (this.state.icon === \"wind\") {\n              this.setState({ icon:  <WiStrongWind size={200} color='#000' />})\n              };\n            if (this.state.icon === \"fog\") {\n              this.setState({ icon:  <WiFog size={200} color='#000' />})\n              };\n            if (this.state.icon === \"cloudy\") {\n              this.setState({ icon:  <WiCloudy size={200} color='#000' />})\n              };\n            if (this.state.icon === \"partly-cloudy-day\") {\n              this.setState({ icon:  <WiDayCloudy size={200} color='#000' />})\n            };\n            if (this.state.icon === \"partly-cloudy-night\") {\n              this.setState({ icon:  <WiNightAltPartlyCloudy size={200} color='#000' />})\n            };\n          this.setState({ currentWind: currentWeather.windSpeed });\n          this.setState({ chanceOfRain: currentWeather.precipProbability });\n          this.setState({ currentHumidity: currentWeather.humidity });\n          this.setState({ currentTemp: currentWeather.apparentTemperature });\n          this.setState({ highTemp: response.daily.data[0].temperatureHigh });\n          this.setState({ lowTemp: response.daily.data[0].temperatureLow });\n          console.log(currentWeather);\n          console.log(response);\n        })\n        .catch(error => console.log(error));\n    };\n\n    //runs the apiURL() and the apiResponse()\n    const weatherComponents = async () => {\n      apiURL();\n      await apiResponse(apiURL());\n    };\n\n    //using setTimeout to wait for geolocation until I find a more efficient way\n    function getWeather() {\n      setTimeout(() => {\n        weatherComponents();\n      }, 7000);\n    }\n    getWeather();\n  }\n\n  render() {\n    return (\n      <div>\n        <CurrentWeather\n          icon={this.state.icon}\n          currentTemp={this.state.currentTemp}\n          high={this.state.highTemp}\n          low={this.state.lowTemp}\n          wind={this.state.currentWind}\n          chanceOfRain={this.state.chanceOfRain}\n          humidity={this.state.currentHumidity}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}