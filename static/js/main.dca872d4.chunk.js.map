{"version":3,"sources":["CurrentWeather.js","index.js"],"names":["CurrentWeather","props","react_default","a","createElement","Fragment","className","style","display","verticalAlign","weather_icons_react","size","color","fontSize","currentTemp","high","low","listStyle","textAlign","wind","currentWind","humidity","App","state","lat","long","errormsg","icon","chanceOfRain","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","async1","concat","async2","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","res","json","response","currentWeather","currently","windSpeed","precipProbability","currentHumidity","currentIcon","apparentTemperature","highTemp","daily","data","temperatureHigh","lowTemp","temperatureLow","console","log","catch","stop","_x","apply","arguments","doManyThings","_ref3","_callee3","_context3","setTimeout","src_CurrentWeather","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.dca872d4.chunk.js","sourcesContent":["import React from \"react\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy }\nfrom 'weather-icons-react';\nimport MainCSS from \"./main.css\";\n\n\nconst CurrentWeather = (props) => {\n  return (\n    <React.Fragment>\n    <div className= \"todaysDetails\" style={ {display: \"inline-block\"} }>\n      <div className= \"icon\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n        <WiStrongWind size={200} color='#000' />\n      </div>\n      <div className=\"dailyTemp\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n        <p className=\"currentTemp\" style={ {fontSize: \"9rem\"} }>{props.currentTemp}</p>\n        <p className= \"hiLo temp\" style={ {fontSize: \"1.5rem\"} }>{props.high} / {props.low}</p>\n      </div>\n    </div>\n    <div className= \"currentWeatherDetails\" style={ {display: \"inline-block\", verticalAlign: \"middle\"} }>\n      <ul style={ {listStyle: \"none\"} }>\n        <li className= \"currentWindSpeed\" style= { {fontSize: \"1.5rem\", textAlign: \"center\"} }>\n          <WiWindy size={40} color='#000' />\n          <span>{props.wind}</span>\n        </li>\n        <li className= \"chanceOfPrecip\" style= { {fontSize: \"1.5rem\"} }>\n          <WiUmbrella size={40} color='#000' />\n          <span>{props.currentWind}</span>\n        </li>\n        <li className= \"currentHumidity\" style= { {fontSize: \"1.5rem\"} }>\n          <WiRaindrops size={40} color='#000' />\n          <span>{props.humidity}</span>\n        </li>\n      </ul>\n    </div>\n  </React.Fragment>\n\n  );\n};\nexport default CurrentWeather;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport WeatherIcons from 'react-weathericons';\n\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    errormsg: \"\",\n    icon: null,\n    currentTemp: null,\n    high: null,\n    low: null,\n    wind: null,\n    chanceOfRain: null,\n    humidity: null\n  };\n\n  componentDidMount() {\n    const getPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          this.setState({\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          });\n        },\n        error => this.setState({ errormsg: error.message })\n      );\n    };\n    getPosition();\n\n/////////////working on async function//////////////////////////////////////////\nlet async1 = ()=> {\n  let apiCall = `https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n    this.state.lat\n  },${this.state.long}`;\n  return apiCall;\n}\n\nlet async2 = async(url) => {\n  fetch(url)\n  .then(res => res.json())\n  .then(response => {\n        //get current weather conditions\n        // let currentWeather = response.currently;\n        // let currentWind = currentWeather.windSpeed;\n        // let chanceOfRain = currentWeather.precipProbability;\n        // let currentHumidity = currentWeather.humidity;\n        // let currentIcon = currentWeather.icon;\n        // let currentTemp = currentWeather.apparentTemperature;\n        // //get high and low //\n        // let highTemp = response.daily.data[0].temperatureHigh;\n        // let lowTemp = response.daily.data[0].temperatureLow;\n        let currentWeather = response.currently;\n        this.setState({currentWind: currentWeather.windSpeed});\n        this.setState({chanceOfRain: currentWeather.precipProbability});\n        this.setState({currentHumidity: currentWeather.humidity});\n        this.setState({currentIcon: currentWeather.icon});\n        this.setState({currentTemp: currentWeather.apparentTemperature});\n        this.setState({highTemp: response.daily.data[0].temperatureHigh});\n        this.setState({lowTemp: response.daily.data[0].temperatureLow});\n        console.log(currentWeather);\n        console.log(response);\n      })\n      .catch(error => console.log(error))\n}\n\n\n\n\nlet async3 = async(response) => {\n}\nconst doManyThings = async () => {\n  async1();\n  console.log(async1());\n  await async2(async1());\n  // await async3();\n  console.log(this.state);\n};\n\n\nfunction getWeather() {\n    setTimeout(() => {\n      doManyThings();\n    }, 4000)\n  }\n  getWeather();\n\n\n////////////working on aync function//////////////////////////////////////////\n    // const getWeatherData = () => {\n    //   let apiCall = `https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n    //     this.state.lat\n    //   },${this.state.long}`;\n    //   fetch(apiCall)\n        // .then(res => res.json())\n        // .then(response => this.setState({\n        //   //get current weather conditions\n        //   currentWeather: response.currently,\n        //   currentWind: currentWeather.windSpeed,\n        //   chanceOfRain: currentWeather.precipProbability,\n        //   currentHumidity: currentWeather.humidity,\n        //   currentIcon: currentWeather.icon,\n        //   currentTemp: currentWeather.apparentTemperature,\n        //   //get high and low //\n        //   highTemp: response.daily.data[0].temperatureHigh,\n        //   lowTemp: response.daily.data[0].temperatureLow\n        // })\n    //\n    //     .then(response => {\n    //       //get weekly weather forecast\n    //       let dailyString = response.daily.data;\n    //       let iconArray = dailyString.map((item) => {\n    //         return item.icon;\n    //       });\n    //       //get current weather conditions\n    //       let currentWeather = response.currently;\n    //       let currentWind = currentWeather.windSpeed;\n    //       let chanceOfRain = currentWeather.precipProbability;\n    //       let currentHumidity = currentWeather.humidity;\n    //       let currentIcon = currentWeather.icon;\n    //       let currentTemp = currentWeather.apparentTemperature;\n    //       //get high and low //\n    //       let highTemp = response.daily.data[0].temperatureHigh;\n    //       let lowTemp = response.daily.data[0].temperatureLow;\n    //       console.log(currentWeather);\n    //       console.log(response);\n    //     })\n    //     .catch(error => console.log(error))\n    // };\n  }\n\n\n  render() {\n    return (\n      <div>\n        <CurrentWeather icon={this.state.currentIcon} currentTemp={this.state.currentTemp}\n           high={this.state.highTemp} low={this.state.lowTemp} wind={this.state.currentWind}\n           chanceOfRain={this.state.chanceOfRain} humidity={this.state.currentHumidity} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}