{"version":3,"sources":["CurrentWeather.js","index.js"],"names":["CurrentWeather","props","react_default","a","createElement","Fragment","className","summary","icon","currentTemp","high","low","style","listStyle","weather_icons_react","size","wind","chanceOfRain","humidity","App","state","lat","long","errormsg","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","apiURL","concat","geoCode","getCityState","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","res","json","response","console","log","stop","_x","apply","arguments","apiResponse","_ref2","_callee2","_context2","currentWeather","currently","color","currentWind","Math","round","windSpeed","precipProbability","currentHumidity","temperature","highTemp","daily","data","temperatureHigh","lowTemp","temperatureLow","catch","_x2","weatherComponents","_ref3","_callee3","_context3","setTimeout","src_CurrentWeather","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.2d503b96.chunk.js","sourcesContent":["import React from \"react\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy }\nfrom 'weather-icons-react';\nimport MainCSS from \"./main.css\";\n\nconst CurrentWeather = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"weatherApp\">\n          <div className= \"summary\">\n            {props.summary}\n          </div>\n          <div className= \"todaysDetails\">\n            <div className= \"icon\">\n              {props.icon}\n            </div>\n            <div className=\"dailyTemp\">\n              <p className=\"currentTemp\">{props.currentTemp}</p>\n              <p className= \"hiLoTemp\">{props.high}° / {props.low}°</p>\n            </div>\n          </div>\n          <div className= \"currentWeatherDetails\">\n            <ul style={ {listStyle: \"none\"} }>\n              <li className= \"currentWindSpeed\">\n                <WiStrongWind size={40} />\n                <span>{props.wind}mph</span>\n              </li>\n              <li className= \"chanceOfPrecip\">\n                <WiUmbrella size={40} />\n                <span>{props.chanceOfRain}%</span>\n              </li>\n              <li className= \"currentHumidity\">\n                <WiRaindrops size={40} />\n                <span>{props.humidity}%</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n  </React.Fragment>\n\n  );\n};\nexport default CurrentWeather;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy}\nfrom 'weather-icons-react';\n\n//setting up initial state\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    errormsg: \"\",\n    icon: null,\n    currentTemp: null,\n    high: null,\n    low: null,\n    wind: null,\n    chanceOfRain: null,\n    humidity: null,\n    summary: null\n  };\n\n  componentDidMount() {\n    //get the user's current location\n    const getPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          this.setState({\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          });\n        },\n        error => this.setState({ errormsg: error.message })\n      );\n    };\n    getPosition();\n\n    //adds the latitude and longitude to the api request URL\n    let apiURL = () => {\n      let apiCall = `https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n        this.state.lat\n      },${this.state.long}`;\n      return apiCall;\n    };\n    //googlemaps api key AIzaSyDBbNeVUJg3BVLIi7_lr7xGciYsh7MDNlc\n    let geoCode = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.lat},${this.state.long}&key=AIzaSyDBbNeVUJg3BVLIi7_lr7xGciYsh7MDNlc`;\n\n    let getCityState = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response =>{\n          console.log(response);\n        })\n    }\n    console.log(getCityState(geoCode));\n\n    //fetches response from DarkSky API and sets up state for app components\n    let apiResponse = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response => {\n          let currentWeather = response.currently;\n\n          //setting the icon for current weather, the name of icons in the library does not match icon names given by the api\n          this.setState({ icon: currentWeather.icon });\n            if (this.state.icon === \"clear-day\") {\n              this.setState({ icon:  <WiDaySunny size={200} color='#fff917' />})\n              };\n            if (this.state.icon === \"clear-night\") {\n              this.setState({ icon:  <WiNightClear size={200} color='#000' />})\n              };\n            if (this.state.icon === \"rain\") {\n              this.setState({ icon:  <WiRain size={200} color='#000' />})\n              };\n            if (this.state.icon === \"snow\") {\n              this.setState({ icon:  <WiSnow size={200} color='#000' />})\n              };\n            if (this.state.icon === \"sleet\") {\n              this.setState({ icon:  <WiSleet size={200} color='#000' />})\n              };\n            if (this.state.icon === \"wind\") {\n              this.setState({ icon:  <WiStrongWind size={200} color='#000' />})\n              };\n            if (this.state.icon === \"fog\") {\n              this.setState({ icon:  <WiFog size={200} color='#000' />})\n              };\n            if (this.state.icon === \"cloudy\") {\n              this.setState({ icon:  <WiCloudy size={200} color='#000' />})\n              };\n            if (this.state.icon === \"partly-cloudy-day\") {\n              this.setState({ icon:  <WiDayCloudy size={200} color='#000' />})\n            };\n            if (this.state.icon === \"partly-cloudy-night\") {\n              this.setState({ icon:  <WiNightAltPartlyCloudy size={200} color='#000' />})\n            };\n          this.setState({ currentWind: Math.round(currentWeather.windSpeed) });\n          this.setState({ chanceOfRain: Math.round(currentWeather.precipProbability) * 100 });\n          this.setState({ currentHumidity: currentWeather.humidity * 100});\n          this.setState({ currentTemp: Math.round(currentWeather.temperature) });\n          this.setState({ highTemp: Math.round(response.daily.data[0].temperatureHigh) });\n          this.setState({ lowTemp: Math.round(response.daily.data[0].temperatureLow) });\n          this.setState({ summary: currentWeather.summary });\n          console.log(currentWeather);\n          console.log(response);\n        })\n        .catch(error => console.log(error));\n    };\n\n    //runs the apiURL() and the apiResponse()\n    const weatherComponents = async () => {\n      apiURL();\n      await apiResponse(apiURL());\n    };\n\n    //using setTimeout to wait for geolocation until I find a more efficient way\n    function getWeather() {\n      setTimeout(() => {\n        weatherComponents();\n      }, 7000);\n    }\n    getWeather();\n  }\n\n  render() {\n    return (\n      <div>\n        <CurrentWeather\n          icon={this.state.icon}\n          currentTemp={this.state.currentTemp}\n          high={this.state.highTemp}\n          low={this.state.lowTemp}\n          wind={this.state.currentWind}\n          chanceOfRain={this.state.chanceOfRain}\n          humidity={this.state.currentHumidity}\n          summary={this.state.summary}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}