{"version":3,"sources":["CurrentWeather.js","index.js"],"names":["CurrentWeather","props","react_default","a","createElement","Fragment","className","icon","currentTemp","high","low","style","listStyle","weather_icons_react","size","wind","chanceOfRain","humidity","App","state","lat","long","errormsg","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","apiURL","concat","apiResponse","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","res","json","response","currentWeather","currently","color","currentWind","Math","round","windSpeed","precipProbability","currentHumidity","temperature","highTemp","daily","data","temperatureHigh","lowTemp","temperatureLow","console","log","catch","stop","_x","apply","arguments","weatherComponents","_ref2","_callee2","_context2","setTimeout","src_CurrentWeather","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.971cc98f.chunk.js","sourcesContent":["import React from \"react\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy }\nfrom 'weather-icons-react';\nimport MainCSS from \"./main.css\";\n\nconst CurrentWeather = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"weatherApp\">\n          <div className= \"todaysDetails\">\n            <div className= \"icon\">\n              {props.icon}\n            </div>\n            <div className=\"dailyTemp\">\n              <p className=\"currentTemp\">{props.currentTemp}</p>\n              <p className= \"hiLoTemp\">{props.high}° / {props.low}°</p>\n            </div>\n          </div>\n          <div className= \"currentWeatherDetails\">\n            <ul style={ {listStyle: \"none\"} }>\n              <li className= \"currentWindSpeed\">\n                <WiStrongWind size={40} />\n                <span>{props.wind}mph</span>\n              </li>\n              <li className= \"chanceOfPrecip\">\n                <WiUmbrella size={40} />\n                <span>{props.chanceOfRain}</span>\n              </li>\n              <li className= \"currentHumidity\">\n                <WiRaindrops size={40} />\n                <span>{props.humidity}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n  </React.Fragment>\n\n  );\n};\nexport default CurrentWeather;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport { WiDaySunny, WiNightClear, WiRain, WiSnow, WiSleet, WiStrongWind, WiFog,\nWiCloudy, WiDayCloudy, WiNightAltPartlyCloudy, WiUmbrella,WiRaindrops, WiWindy}\nfrom 'weather-icons-react';\n\n//setting up initial state\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    errormsg: \"\",\n    icon: null,\n    currentTemp: null,\n    high: null,\n    low: null,\n    wind: null,\n    chanceOfRain: null,\n    humidity: null\n  };\n\n  componentDidMount() {\n    //get the user's current location\n    const getPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          this.setState({\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          });\n        },\n        error => this.setState({ errormsg: error.message })\n      );\n    };\n    getPosition();\n\n    //adds the latitude and longitude to the api request URL\n    let apiURL = () => {\n      let apiCall = `https://api.darksky.net/forecast/c2f9808ca1a73ccc2367f463c969facc/${\n        this.state.lat\n      },${this.state.long}`;\n      return apiCall;\n    };\n\n    //fetches response from DarkSky API and sets up state for app components\n    let apiResponse = async url => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response => {\n          let currentWeather = response.currently;\n\n          //setting the icon for current weather, the name of icons in the library does not match icon names given by the api\n          this.setState({ icon: currentWeather.icon });\n            if (this.state.icon === \"clear-day\") {\n              this.setState({ icon:  <WiDaySunny size={200} color='#000' />})\n              };\n            if (this.state.icon === \"clear-night\") {\n              this.setState({ icon:  <WiNightClear size={200} color='#000' />})\n              };\n            if (this.state.icon === \"rain\") {\n              this.setState({ icon:  <WiRain size={200} color='#000' />})\n              };\n            if (this.state.icon === \"snow\") {\n              this.setState({ icon:  <WiSnow size={200} color='#000' />})\n              };\n            if (this.state.icon === \"sleet\") {\n              this.setState({ icon:  <WiSleet size={200} color='#000' />})\n              };\n            if (this.state.icon === \"wind\") {\n              this.setState({ icon:  <WiStrongWind size={200} color='#000' />})\n              };\n            if (this.state.icon === \"fog\") {\n              this.setState({ icon:  <WiFog size={200} color='#000' />})\n              };\n            if (this.state.icon === \"cloudy\") {\n              this.setState({ icon:  <WiCloudy size={200} color='#000' />})\n              };\n            if (this.state.icon === \"partly-cloudy-day\") {\n              this.setState({ icon:  <WiDayCloudy size={200} color='#000' />})\n            };\n            if (this.state.icon === \"partly-cloudy-night\") {\n              this.setState({ icon:  <WiNightAltPartlyCloudy size={200} color='#000' />})\n            };\n          this.setState({ currentWind: Math.round(currentWeather.windSpeed) });\n          this.setState({ chanceOfRain: currentWeather.precipProbability });\n          this.setState({ currentHumidity: currentWeather.humidity });\n          this.setState({ currentTemp: Math.round(currentWeather.temperature) });\n          this.setState({ highTemp: Math.round(response.daily.data[0].temperatureHigh) });\n          this.setState({ lowTemp: Math.round(response.daily.data[0].temperatureLow) });\n          console.log(currentWeather);\n          console.log(response);\n        })\n        .catch(error => console.log(error));\n    };\n\n    //runs the apiURL() and the apiResponse()\n    const weatherComponents = async () => {\n      apiURL();\n      await apiResponse(apiURL());\n    };\n\n    //using setTimeout to wait for geolocation until I find a more efficient way\n    function getWeather() {\n      setTimeout(() => {\n        weatherComponents();\n      }, 7000);\n    }\n    getWeather();\n  }\n\n  render() {\n    return (\n      <div>\n        <CurrentWeather\n          icon={this.state.icon}\n          currentTemp={this.state.currentTemp}\n          high={this.state.highTemp}\n          low={this.state.lowTemp}\n          wind={this.state.currentWind}\n          chanceOfRain={this.state.chanceOfRain}\n          humidity={this.state.currentHumidity}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}